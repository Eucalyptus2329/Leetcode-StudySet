L1. Two sums

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
 
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
Constraints:
	• 2 <= nums.length <= 104
	• -109 <= nums[i] <= 109
	• -109 <= target <= 109
	• Only one valid answer exists.


My incorrect solution
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
       foreach(int num in nums){  
           if(num[i] + num[j] == target){
               return {0},{1} [i,j];
           }
       } 
    }
}

O(n^2):
Loop through the first index and then run a second iteration loop to compare the rest of the other indices
[0,1,2,3,4]
^
     ^ ^ ^ ^

Code (in C#): 
Public class Solution {	
	Public int[] TwoSum(int[] nums, int target) {
	      int[]result=newint[2];
	      for(inti=0;i<nums.Length;i++){
	             for(intj=i+1;j<nums.Length;j++){
 	                      if(nums[i]+nums[j]==target){
	                           result[0] = i;
	                           result[1] = j;
	                           return result;
	                    }
	                }
	          }
	      return result;
	     }
	}

O(n):

Code (in C#):
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int, int> dict = new Dictionary<int, int>();
        for (int i = 0; i < nums.Length; i++)
        {
            int diff = target - nums[i];
            if (dict.ContainsKey(diff))
            {
                return new int[] {dict[diff], i};
            }
            if (!dict.ContainsKey(nums[i]))
            {
                dict.Add(nums[i], i);
            }
        }
        return new int[]{0,0};
    }
}

JavaScript Code (using Map to store the value and index)
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    var map = {};
    for(var i = 0 ; i < nums.length ; i++){
        var n = nums[i];
        if(map[target-n] >= 0){
            return [map[target-n],i]
        } 
        else {
            map[n] = i;   //use map to store the value and index position
        }
    }
};
